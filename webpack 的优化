优化分为两部分：
（1） 优化开发体验：目的是提升开发效率
  ● 优化构建速度  1-4
  ● 优化使用体验  5-6
  
（2） 优化输出质量：优化构建输出的要发布到线上的代码，为用户呈现体验更好的网页，
    eg. ●  减少首屏加载的时间  7-12
        ●  提升性能流畅度      13-14
  
1. 缩小文件的搜索范围
  ● Loader: Loader 对文件的转换操作很耗时，让尽可能少的文件被 Loader 处理。
    module.exports = {
      module: {
        rules: [
        {
          test: /\.js/,
          // 缓存转换出的结果
          use: ['babel-loader?cacheDirectory'],
          include: path.resolve(__dirname, 'src')
        }
        ]
      }
    }
  ● relove.modules: 
   module.exports = {
      resolve: {
        // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤
        // 其中， __dirname 表示当前工作目录，即项目根目录
        modules: [path.resolve(__dirname, 'node_modules')]
      }
    }
    
  ● relove.mainFields：采用哪个字段作为入口文件的描述
    ♥ mainFields 默认值和当前 target 配置有关系
      -- target 为 web 或者 webworker 时，值是 ["brower", "module", "main"]
      -- target 为其他值时，值是 ["module", "main"]
    module.exports = {
      resolve: {
        //只采用 main 字段作为入口文件的描述字段，以减少搜索步骤
        mainFields: ['main'],
      }
    }
    
  ● relove.alias：通过别名来将导入路径映射成一个新的导入路径
    module.exports = {
      resolve:{
        // 使用 alias 将导入 react 的语句换成直接使用单独完整的 react.min.js 文件
        // 减少耗时的递归解析操作，单独完整的 `react.min.js` 文件没有采用模块化
        alias: {
          'react': path.resolve(__dirname, './node_modules/react/dist/react.min.js')
        }
      }
    }
    
  
  ● relove.extensions： 尝试过程中用到的后缀列表
    默认是 extensions: ['.js', '.json']
    -- 写导入语句是尽可能带上后缀，避免寻找过程
    -- 频率出现高的文件后缀优先放在最前面
    --  后缀尝试列表尽可能小，项目中不可能存在的情况不要写
    
  ● module.noParse：让 Webpack 忽略对没采用模块化的文件的递归解析处理
    module.expores = {
      // 单独完整的 `react.min.js` 文件没有采用模块化，忽略对其的递归解析处理
      noParse: [/react\.min\.js$/]
    }

2. 使用 DIIPlugin
  ● .dll ： 动态链接库，包含为其他模块调用的函数和数据
  ● 给 Web 项目构建接入动态链接库的思想，要完成的事情：
    -- 将网页依赖的基础模块抽离出来，打包到一个个单独的动态链接库中。在一个动态链接库中可以包含多个模块。
    -- 当需要导入的模块存在于某个动态链接库中时，这个模块不能被再次打包，而是去动态链接库中获取。
    -- 页面依赖的所有动态链接库都需要被加载。
  ● 接入 Webpack
    通过内置插件接入：
      -- DllPlugin 插件：用于打包出一个个单独的动态链接库文件
      -- DllReferencePlugin 插件：用于在主要的配置文件中引入 DllPlugin 插件打包好的动态链接库文件
      
      ◆ 实现
        (1) 构建出动态链接库文件
        (2) 使用动态链接库文件
        (3) 执行构建
          -- 如果动态链接库相关的文件还没有编译出来，就需要先将他们编译出来。 方法是执行： webpack --config webpack_dll.config.js 命令
          -- 在确保动态链接库存在时，才能正常编译入口执行文件。方法是执行： webpack 命令
3. 使用 HappyPack
  
4. 使用 ParalleUglifyPlugin

5. 使用自动刷新

6. 开启模块热更替

7. 区分环境

8. 压缩代码

9. CDN 加速

10. 使用 Tree Shaking

11. 提取公共代码

12. 分割代码以按需加载

13. 使用 Prepack

14. 开启 Scope Hoisting

15. 输出分析：利用工具快速找出问题的所在

16. 优化总结
  (1) 侧重优化开发体验的文件:  webpack.config.js
  (2) 侧重优化输出质量的文件:  webpack-dist.config.js
