有两种配置方式：
    （1）通过一个 js 文件描述配置，eg. webpack.config.js
    （2）通过命令行参数传入，eg. webpack--devtool source-map
    这两种方式也可以相互搭配。
    
一、 webpack 配置项（根据影响的功能划分）
  1. Entry: 配置模块的入口
  2. Output: 如何输出最终想要的代码
  3. Module: 处理模块的规则
  4. Resolve: 寻找模块的规则
  5. Plugins: 扩展插件
  6. DevServer: 配置DevServer
  7. 其他配置项: 其他零散的配置项
  8. 整体配置结构: 整体地描述各配置项的结构
  9. 多种配置类型: 配置文件不止可以返回一个 Object，还可以返回其他形式
  10. 配置总结: 寻找配置 Webpack 的规律，减少思维负担
  
二、 各个配置项设置
  1、Entry
    （1）类型：string, array(搭配 output.library 配置项使用时，只有数组里的最后一个入口文件的模块会被导出), object
    （2）Chunk 的名称：与 Entry 的配置类型有关
        string/array: 只会生成一个 Chunk, 名称是 main
        object: 可能会出现多个 Chunk，名称是 object 键值对中键的名称
    （3）配置动态 Entry：有多个页面需要为每一个页面的入口配置一个 Entry，但这些页面的数量可能会不断增长，这时 Entry 的配置会受到其他因素的影响，
                        导致不能写成静态值。
                        解决办法：将 Entry 设置成一个函数动态的返回上面所说的配置。
  2、Output
    （1）filename: 
        ● 一个输出文件，写成静态不变的 string --------filename:'bundle.js'
        ● 多个 Chunk 要输出，需要借助模板和变量-------filename:'[name].js'  [name] 代表用内置的 name 变量去替换，相当于一个字符串模板函数
        ● 其他内置变量 ：
            id: Chunk 的唯一标识，从0开始
            name: Chunk 的名称
            hash: Chunk 的唯一标识的 Hash 值
            chunkhash: Chunk 内容的 Hash 值
    （2）chunkFilename: 内置变量和 filename 一致，但 chunkFilename 配置无入口的 Chunk 在输出时的文件名称(运行过程中生成的 Chunk)，
                        常见场景： 使用 CommonChunkPlugin、使用 import() 动态加载等
                        
    ------------------------------------------------------------------------------------------------------------------------------------
    
    （3）path: 配置输出文件存放在本地的目录，必须是 string 类型的绝对路径。通常通过 Node.js 的 path 模块去获取绝对路径：
              path: path.resolve(__dirname, 'dist_[hash]')
    （4）publicPath: 配置发布到线上资源的 URL 前缀，默认值是空字符串，即使用相对路径。
    
    ------------------------------------------------------------------------------------------------------------------------------------
    
    （5）crossOriginLoading
    （6）libraryTarget 和 library
    （7）libraryExport
