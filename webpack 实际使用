1. 使用 ES6：
  ● 我们要把 ES6 转换成 目前已经支持良好的 ES5，需要做两件事：
    1> 将新的 ES6 语法 用 ES5 实现。 eg. class
    2> 为新的 API 注入 polyfill。 eg. fetch API
  ● Babel 可以完成上面两件事
    ✪ Babel 配置文件 .babelrc
      {
        "plugins": [
          [
            "transform-runtime",
            {
              "polyfill": false
            }
          ]
        ],
        "presets": [
          
        ]
      }
  ● 如何在 Webpack 中使用 Babel：根据功能，Babel做的事情是转换代码，所以应该通过 Loader 接入 Babel
    module.exports = {
      module: {
        rules: [
        {
          test: /\.js$/,
          use: ['babel-loader'],
        }
        ]
      },
      devtool: 'source-map'
    }
    安装新引入的依赖
    npm i -D babel-core babel-loader
    npm i -D babel-preset-env
  
2. 使用 TypeScript
  ● 主要提供了类型检查系统和对 ES6 语法的支持，但不支持新的 API。不被原生支持，必须通过构建将它转换成 JavaScript
    export function show(content: string){
      window.document.getElementById('app').innerText = 'Hello,' + content ;
    }
    // 通过 ES6 模块规范导入 show 函数
    import { show } from './show' ;
    // 执行 show 函数
    show('Webpack');
    
  ● 用于配置编译选项的 tsconfig.json 文件：
    ✪ tsconfig.json
      {
        "compilerOptions": {
          "module": "commonjs",   // 编译出的代码采用的模块规范
          "target": "es5",        // 编译出的代码采用 ES 的哪个版本
          "sourceMap": true,      // 输出 Source Map 以方便调试
          
          "importHelpers": true   // 减少代码冗余， 
                                  // 原理和 babel-plugin-transform-runtime 类似，会将辅助函数转换成导入语句:
                                  // var _tslib = require('tslib');  _tslib._extend(target);
        },
        "exclude": [              // 不编译这些目录里的文件
          "node_modules"
        ]
      }
      
      npm install -g tyscript 安装编译到全局，通过 tsc hello.ts
   
   ● 集成 Webpack
      要让 Webpack 支持 TypeScript，需要解决两个问题：
    1> 通过 Loader 将 TypeScript 转换成 JavaScript  // awesome-typescript-loader
    2> Webpck 在寻找模块对应的文件时需要尝试 ts 后缀   //extensions
    webpack 配置：
    {
    resolve: {
      // 先尝试以 ts 为后缀的 TypeScript 源码文件
      extensions: ['.ts','.js']
    },
    module: {
      rules: [
        {
          test: /\.ts$/,
          loader: 'awesome-typescript-loader'
        }
      ]
    }
    }
    
    npm i -D typescript awesome-typescript-loader
3. 使用 Flow 检查器
    ● 静态类型检测器
    Flow 使用效果：
     // @flow       ---告诉 Flow 检查器这个文件需要被检查
     //  静态类型检查
     function square1(n: number): number {
      return n * n;
     }
     square1('2');  // Error: square1 需要传入 number 作为参数
     // 类型推断检查
     function square2(n) {
      return n * n; // Error: 传入的 string 类型不能做乘法运算
     }
     square2('2'); 
     ● 如何运行
      npm i -D flow-bin
      "script": {
        "flow": "flow"
      }
      npm run flow
      
      ★ 采用 Flow 静态类型语法的 JavaScript 无法直接在目前已有的 JS 引擎中运行，所以需要在构建时去掉这些静态类型语法，有两种方法：
        babel-preset-flow: 速度快 
        flow-remove-types: 与 Babel 集成，方便
     ● 集成 Webpack
     (1) 安装 npm i -D babel-preset-flow
     (2)修改 .babelrc,加入 Flow Preset
      "presets": [
        ...[],
        "flow"
      ]
     
4. 使用 SCSS 语言
  接入 Webpack：
  module.exports = {
    module: {
      rules: [
        {
          // 增加对 SCSS 文件的支持
          test: /\.scss/,
          use: ['style-loader', 'css-loader', 'sass-loader'],   // 重新构建前要安装这些依赖，其中 sass-loader 依赖 node-sass
        }
      ]
    }
  }
  Loader 具体处理流程：
  ◆ 通过 sass-loader 将 SCSS 源码转换为 CSS 代码，再将 CSS 代码交给 css-loader 处理。
  ◆ css-loader 会找出 CSS 代码中 @import 和 url() 这样的导入语句，告诉 Webpack 依赖这些资源。同时支持 CSS Modules，压缩 CSS 等功能。
     处理完后再将结果交给 style-loader 处理。
  ◆ style-loader 将 CSS 代码转换成字符串后注入 JavaScript 代码中，通过 JavaScript 向 DOM 增加样式。想将 CSS 代码提取到单独文件，使用 ExtractTextPlugin
5. 使用 PostCSS

6. 使用 React 框架

7. 使用 Vue 框架

8. 使用 Angular2 框架

9. 为单页应用生成 HTML

10. 管理多个单页应用

11. 构建同构应用

12. 构建 Electron 应用

13. 构建 Npm 模块

14. 构建离线应用

15. 搭配 Npm Script

16. 检查代码

17. 通过 Node.js API 启动 Webpack

18. 使用 Webpack Dev Middleware

19. 加载图片

20. 加载 SVG

21. 加载 Source Map

22. 实战总结
  分析和解决问题的思路:
    ● 掌握基础
    
    ● 找出现实和目标之间的差异。 eg.使用了 JSX 和 ES6，就需要将源码转换成 ES5
    
    ● 找出从现实到目标的可能路径。 eg. 上面提到的可以使用 Babel 转换源码
    
    ● 寻找社区中现成的针对可能路径的 Webpack 集成方案
    
    ● 需求非常特别时，编写自己的 Loader 或者 Plugin
============================================================================================================================

解决问题的过程中需要拥有的重要能力：

    ● 通过一个知识尽可能多地联想到与其相关的知识，这有利于打通自己的知识体系，从经验中更快地得出答案
    
    ● 善于使用搜索引擎去寻找自己所面临的问题，这有利于借助他人的经验更快的得出答案，而不是自己重新探索。
