1. 使用 ES6：
  ● 我们要把 ES6 转换成 目前已经支持良好的 ES5，需要做两件事：
    1> 将新的 ES6 语法 用 ES5 实现。 eg. class
    2> 为新的 API 注入 polyfill。 eg. fetch API
  ● Babel 可以完成上面两件事
    ✪ Babel 配置文件 .babelrc
      {
        "plugins": [
          [
            "transform-runtime",
            {
              "polyfill": false
            }
          ]
        ],
        "presets": [
          
        ]
      }
  ● 如何在 Webpack 中使用 Babel：根据功能，Babel做的事情是转换代码，所以应该通过 Loader 接入 Babel
    module.exports = {
      module: {
        rules: [
        {
          test: /\.js$/,
          use: ['babel-loader'],
        }
        ]
      },
      devtool: 'source-map'
    }
    安装新引入的依赖
    npm i -D babel-core babel-loader
    npm i -D babel-preset-env
  
2. 使用 TypeScript
  ● 主要提供了类型检查系统和对 ES6 语法的支持
  ●
  ● 
3. 使用 Flow 检查器

4. 使用 SCSS 语言

5. 使用 PostCSS

6. 使用 React 框架

7. 使用 Vue 框架

8. 使用 Angular2 框架

9. 为单页应用生成 HTML

10. 管理多个单页应用

11. 构建同构应用

12. 构建 Electron 应用

13. 构建 Npm 模块

14. 构建离线应用

15. 搭配 Npm Script

16. 检查代码

17. 通过 Node.js API 启动 Webpack

18. 使用 Webpack Dev Middleware

19. 加载图片

20. 加载 SVG

21. 加载 Source Map

22. 实战总结
  分析和解决问题的思路:
    ● 掌握基础
    
    ● 找出现实和目标之间的差异。 eg.使用了 JSX 和 ES6，就需要将源码转换成 ES5
    
    ● 找出从现实到目标的可能路径。 eg. 上面提到的可以使用 Babel 转换源码
    
    ● 寻找社区中现成的针对可能路径的 Webpack 集成方案
    
    ● 需求非常特别时，编写自己的 Loader 或者 Plugin
============================================================================================================================

解决问题的过程中需要拥有的重要能力：

    ● 通过一个知识尽可能多地联想到与其相关的知识，这有利于打通自己的知识体系，从经验中更快地得出答案
    
    ● 善于使用搜索引擎去寻找自己所面临的问题，这有利于借助他人的经验更快的得出答案，而不是自己重新探索。
